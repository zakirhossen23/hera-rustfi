{
  "address": "0x0D5E003bCC9EB27000e1AC997a4C21AaF6B0D3cf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "AllTokensGift",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "AllUserToken",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "BidId",
          "type": "uint256"
        }
      ],
      "name": "BidURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "DistributeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_TokenID",
          "type": "string"
        }
      ],
      "name": "GetGiftURIFromToken",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_TokenID",
          "type": "string"
        }
      ],
      "name": "GetGiftedFromToken",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_user",
          "type": "string"
        }
      ],
      "name": "GetNFTsByUserAddrs",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_TokenID",
          "type": "string"
        }
      ],
      "name": "UnWrapGift",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_EventTokenSearchIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_SearchedStore",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_TokenID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_GiftURI",
          "type": "string"
        }
      ],
      "name": "_SetGift",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_UserTokenIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "_getSearchedTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "_setBidURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_raised",
          "type": "string"
        }
      ],
      "name": "_setEventRaised",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_eventWallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "_setEventURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenBidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_BidURI",
          "type": "string"
        }
      ],
      "name": "_setTokenBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_eventid",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_updatedURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_highestBidder",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_eventid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_raised",
          "type": "string"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventWallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "createEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_TokenID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_Recipient",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_GiftURI",
          "type": "string"
        }
      ],
      "name": "createTokenGift",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "eventURI",
      "outputs": [
        {
          "internalType": "string[3]",
          "name": "",
          "type": "string[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "getBidIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        }
      ],
      "name": "getBidsSearchToken",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getEventRaised",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "getGetEventsTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        }
      ],
      "name": "getSearchEventbyWallet",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventID",
          "type": "uint256"
        }
      ],
      "name": "getTokensSearchEvent",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        }
      ],
      "name": "getTotalBid",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "geteventIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "geteventIdFromTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "gettokenIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventID",
          "type": "uint256"
        }
      ],
      "name": "gettokenSearchEventTotal",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_str",
          "type": "string"
        }
      ],
      "name": "strToUint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "res",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b1836266848d3ad76ae0e066dbed2c692c309c7e30b176901576c4b04fb94ae",
  "receipt": {
    "to": null,
    "from": "0x32F48d18db5A63D3345Eaee9d9C326a2cC647B80",
    "contractAddress": "0x0D5E003bCC9EB27000e1AC997a4C21AaF6B0D3cf",
    "transactionIndex": 0,
    "gasUsed": "5194965",
    "logsBloom": "0x
    "blockHash": "0x92ea9eb9b2a89a55c7945224c34b0037b3adbbb0ca4531442f7dfc3f77bd1aab",
    "transactionHash": "0x7b1836266848d3ad76ae0e066dbed2c692c309c7e30b176901576c4b04fb94ae",
    "logs": [],
    "blockNumber": 100248920,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Aurora",
    "Aurora"
  ],
  "numDeployments": 10,
  "solcInputHash": "996c7fee44a41da0ade22fac4cd2f85f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AllTokensGift\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AllUserToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BidId\",\"type\":\"uint256\"}],\"name\":\"BidURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"DistributeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_TokenID\",\"type\":\"string\"}],\"name\":\"GetGiftURIFromToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_TokenID\",\"type\":\"string\"}],\"name\":\"GetGiftedFromToken\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_user\",\"type\":\"string\"}],\"name\":\"GetNFTsByUserAddrs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_TokenID\",\"type\":\"string\"}],\"name\":\"UnWrapGift\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_EventTokenSearchIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_SearchedStore\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_TokenID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_GiftURI\",\"type\":\"string\"}],\"name\":\"_SetGift\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_UserTokenIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_getSearchedTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"_setBidURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_raised\",\"type\":\"string\"}],\"name\":\"_setEventRaised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_eventWallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"_setEventURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenBidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_BidURI\",\"type\":\"string\"}],\"name\":\"_setTokenBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventid\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_updatedURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_highestBidder\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_raised\",\"type\":\"string\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventWallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"createEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_TokenID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_Recipient\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_GiftURI\",\"type\":\"string\"}],\"name\":\"createTokenGift\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"eventURI\",\"outputs\":[{\"internalType\":\"string[3]\",\"name\":\"\",\"type\":\"string[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"getBidIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"getBidsSearchToken\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getEventRaised\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"getGetEventsTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"}],\"name\":\"getSearchEventbyWallet\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventID\",\"type\":\"uint256\"}],\"name\":\"getTokensSearchEvent\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"getTotalBid\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"geteventIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"geteventIdFromTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"gettokenIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventID\",\"type\":\"uint256\"}],\"name\":\"gettokenSearchEventTotal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_str\",\"type\":\"string\"}],\"name\":\"strToUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AuroraERC721.sol\":\"AuroraERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AuroraERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract AuroraERC721 is ERC721 {\\n\\tuint256 private _tokenIds;\\n\\tuint256 private _bidIds;\\n\\tuint256 private _eventIds;\\n\\tuint256 private _EventTokenIds;\\n\\tuint256 private _TokenBidIds;\\n\\tuint256 private _TokenGiftIds;\\n\\tuint256 public _EventTokenSearchIds;\\n\\tuint256 public _UserTokenIds;\\n\\tmapping(uint256 => string[2]) private AllEventTokens; //EventTokenID => EventID + TokenURI\\n\\tmapping(uint256 => string[2]) private AllTokensBids;  //TokenBidID \\t => TokenID + BidURI\\n\\tmapping(uint256 => string[2]) public AllTokensGift;  //TokenGiftIds => TokenID + GiftURI\\n\\tmapping(uint256 => string[3]) public AllUserToken;\\t  //UserTokenID  => User Address+ TokenID + Gifted\\n\\tmapping(uint256 => string[2]) public _SearchedStore;  //Not using\\n\\tmapping(uint256 => string) private _bidURIs;\\t\\t  //BidID\\t\\t => BidURI\\n\\tmapping(uint256 => string[2]) private _tokenURIs;\\t  //TokenID \\t => Token URI \\t + Highest Bidder\\n\\tmapping(uint256 => string[3]) private _eventURIs;\\t  //EventID \\t => Event Wallet + Event URI + Finished\\n\\tmapping(uint256 => string) private _eventRaised;\\t  //EventID \\t => Raised\\n\\tmapping(string => string) private _eventTokens;\\t\\t  //Not using\\n\\taddress public owner;\\n\\nconstructor(string memory name, string memory symbol)\\n\\t\\tERC721(name, symbol)\\n\\t{}\\n\\nfunction claimToken(\\n\\t\\taddress _claimer,\\n\\t\\tstring memory _tokenURI,\\n\\t\\tuint256 _eventid\\n\\t) public returns (uint256) {\\n\\t\\t_mint(_claimer, _tokenIds);\\n\\t\\t_setTokenURI(_tokenIds, _tokenURI);\\n\\t\\t_setTokenEvent(_EventTokenIds, _eventid, _tokenURI);\\n\\t\\t_tokenIds++;\\n\\t\\t_EventTokenIds++;\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\n\\nfunction _setTokenEvent(\\n\\t\\tuint256 EventTokenId,\\n\\t\\tuint256 EventId,\\n\\t\\tstring memory _tokenURI\\n\\t) public virtual {\\n\\t\\tAllEventTokens[EventTokenId] = [\\n\\t\\t\\tStrings.toString(EventId),\\n\\t\\t\\tstring(_tokenURI)\\n\\t\\t];\\n\\t}\\nfunction createEvent(string memory _eventWallet,string memory _eventURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_setEventURI(_eventIds,_eventWallet, _eventURI);\\n\\t\\t_setEventRaised(_eventIds, \\\"0\\\");\\n\\t\\t_eventIds++;\\n\\n\\t\\treturn _eventIds;\\n\\t}\\nfunction createTokenGift(string memory _TokenID,string memory _Recipient,string memory _GiftURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\n        for (uint256 i = 0; i < _UserTokenIds; i++) {\\n\\t\\t\\tif (keccak256(bytes(AllUserToken[i][1])) == keccak256(bytes(_TokenID))){\\n\\t\\t\\t\\tAllUserToken[i][0] =_Recipient;\\n\\t\\t\\t\\tAllUserToken[i][2] =\\\"True\\\";\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_SetGift(_TokenID, _GiftURI);\\n\\n\\t\\treturn _TokenGiftIds;\\n\\t}\\n\\nfunction _SetGift(string memory _TokenID,string memory _GiftURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _TokenGiftIds; i++) {\\n\\t\\t\\tif (keccak256(bytes(AllTokensGift[i][0])) == keccak256(bytes(_TokenID))) {\\n\\t\\t\\t\\tAllTokensGift[i][1] = _GiftURI;\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n        AllTokensGift[_TokenGiftIds] =[\\n\\t\\t\\t_TokenID,\\n\\t\\t\\t_GiftURI\\n\\t\\t];\\n\\t\\t_TokenGiftIds++;\\n\\t\\treturn _TokenGiftIds;\\n\\t}\\n\\nfunction geteventIdByUri(string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][1])) == keccak256(bytes(_eventURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\nfunction geteventIdFromTokenURI(string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (keccak256(bytes(AllEventTokens[i][1])) == keccak256(bytes(_tokenURI))) {\\n\\t\\t\\t\\treturn AllEventTokens[i][0];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn \\\"none\\\";\\n\\t}\\n\\n\\n\\nfunction gettokenIdByUri(string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _tokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_tokenURIs[i][0])) == keccak256(bytes(_tokenURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction getBidIdByUri(string memory _bidURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _bidIds; i++) {\\n\\t\\t\\tif (keccak256(bytes(_bidURIs[i])) == keccak256(bytes(_bidURI))) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction gettokenSearchEventTotal(uint256 EventID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\n\\t\\t\\tuint256 _TemporarySearch = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstring[] memory _SearchedStoreToken = new string[](_TemporarySearch);\\n\\n\\t\\tuint256 _EventTokenSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreToken[_EventTokenSearchIds2] = AllEventTokens[i][\\n\\t\\t\\t\\t\\t1\\n\\t\\t\\t\\t];\\n\\t\\t\\t\\t_EventTokenSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreToken;\\n\\t}\\n\\n\\nfunction getTokensSearchEvent(uint256 EventID)\\n\\t\\tpublic\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\n\\t\\t\\tuint256 _TemporarySearch = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstring[] memory _SearchedStoreToken = new string[](_TemporarySearch);\\n\\n\\t\\t _EventTokenSearchIds = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreToken[_EventTokenSearchIds] = AllEventTokens[i][\\n\\t\\t\\t\\t\\t1\\n\\t\\t\\t\\t];\\n\\t\\t\\t\\t_EventTokenSearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreToken;\\n\\t}\\n\\nfunction getSearchEventbyWallet(string memory Wallet)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Wallet))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstring[] memory _SearchedStoreEvents = new string[](_TemporarySearch);\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Wallet))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreEvents[_SearchIds] = _eventURIs[i][1];\\n\\t\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\treturn _SearchedStoreEvents;\\n\\t}\\n\\nfunction getGetEventsTokenID(uint256 EventId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventId))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][1])) ==\\n\\t\\t\\t\\tkeccak256(bytes(_tokenURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction _getSearchedTokenURI(uint256 _tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\treturn _SearchedStore[_tokenId][0];\\n\\t}\\n\\nfunction _setEventURI(uint256 eventId,  string memory _eventWallet ,string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\t_eventURIs[eventId] = [\\n\\t\\t\\t_eventWallet,\\n\\t\\t\\t_eventURI,\\n\\t\\t\\t\\\"False\\\"\\n\\t\\t];\\n\\t}\\n\\nfunction _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\n\\t\\t_tokenURIs[tokenId][0] = _tokenURI;\\n\\t}\\n\\nfunction eventURI(uint256 eventId) public view returns (string[3] memory) {\\n\\t\\treturn _eventURIs[eventId];\\n\\t}\\n\\nfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (string memory)\\n\\t{\\n\\n\\n\\t\\treturn _tokenURIs[tokenId][0];\\n\\t}\\n\\nfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\nfunction totalEvent() external view returns (uint256) {\\n\\t\\treturn _eventIds;\\n\\t}\\n\\nfunction _setBidURI(uint256 bidId, string memory _bidURI) public virtual {\\n\\t\\t_bidURIs[bidId] = _bidURI;\\n\\t}\\n\\nfunction BidURI(uint256 BidId) public view returns (string memory) {\\n\\t\\treturn _bidURIs[BidId];\\n\\t}\\n\\nfunction getTotalBid(uint256 TokenID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreBid = new string[](10);\\n\\n\\t\\tuint256 _TokenBidSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensBids[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(TokenID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\\n\\t\\t\\t\\t_TokenBidSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreBid;\\n\\t}\\n\\nfunction getBidsSearchToken(uint256 TokenID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreBid = new string[](10);\\n\\n\\t\\tuint256 _TokenBidSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensBids[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(TokenID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\\n\\t\\t\\t\\t_TokenBidSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreBid;\\n\\t}\\n\\nfunction _setTokenBid(\\n\\t\\tuint256 TokenBidId,\\n\\t\\tuint256 TokenId,\\n\\t\\tstring memory _BidURI\\n\\t) public virtual {\\n\\t\\tAllTokensBids[TokenBidId] = [\\n\\t\\t\\tStrings.toString(TokenId),\\n\\t\\t\\tstring(_BidURI)\\n\\t\\t];\\n\\t}\\n\\nfunction getEventRaised(uint256 _eventId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\treturn _eventRaised[_eventId];\\n\\t}\\n\\nfunction _setEventRaised(uint256 _eventId, string memory _raised)\\n\\t\\tpublic\\n\\t{\\n\\t\\t_eventRaised[_eventId] = _raised;\\n\\t}\\n\\n function createBid(\\n\\t\\tuint256 _tokenId,\\n\\t\\tstring memory _bidURI,\\n\\t\\tstring memory _updatedURI,\\n\\t\\tstring memory _highestBidder,\\n\\t\\tuint256 _eventid,\\n\\t\\tstring memory _raised\\n\\t) public   {\\n\\t\\tuint256 _EventTokenId = getGetEventsTokenID(\\n\\t\\t\\t_eventid,\\n\\t\\t\\t_tokenURIs[_tokenId][0]\\n\\t\\t);\\n\\t\\t_tokenURIs[_tokenId][0] = _updatedURI;\\n\\t\\t_tokenURIs[_tokenId][1] = _highestBidder;\\n\\t\\t_setTokenEvent(_EventTokenId, _eventid, _updatedURI);\\n\\t\\t_setEventRaised(_eventid,_raised);\\n\\n\\t\\t_setTokenBid(_TokenBidIds, _tokenId, _bidURI);\\n\\t\\t_TokenBidIds++;\\n\\t\\t_bidIds++;\\n\\t}\\nfunction DistributeToken(uint256 _eventId)\\n\\tpublic   {\\n\\n\\t \\tstring[] memory _SearchedStoreToken =  getTokensSearchEvent(_eventId);\\n\\t\\tfor (uint256 i = 0; i < _EventTokenSearchIds; i++) {\\n\\t\\t\\tuint256 TokenIDOne = gettokenIdByUri(_SearchedStoreToken[i]);\\n\\t\\t\\tstring memory HighestAddress = _tokenURIs[TokenIDOne][1];\\n\\t\\t\\tcreateUserToken(HighestAddress,Strings.toString(TokenIDOne));\\n\\t\\t\\t_eventURIs[_eventId][2] = \\\"Finished\\\";\\n\\t\\t}\\n\\t}\\n\\nfunction GetNFTsByUserAddrs(string memory _user) public view returns (string[] memory) {\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _UserTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllUserToken[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(_user))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstring[] memory _SearchedStoreUser = new string[](_TemporarySearch);\\n\\t\\tfor (uint256 i = 0; i < _UserTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllUserToken[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(_user))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreUser[_SearchIds] = tokenURI(strToUint(AllUserToken[i][1]));\\n\\t\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn _SearchedStoreUser;\\n\\t}\\n\\nfunction GetGiftedFromToken(string memory _TokenID) public view returns (string memory) {\\n\\n\\t\\tfor (uint256 i = 0; i < _UserTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllUserToken[i][1])) ==\\n\\t\\t\\t\\tkeccak256(bytes(_TokenID))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn AllUserToken[i][2];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn \\\"False\\\";\\n\\t}\\n\\nfunction GetGiftURIFromToken(string memory _TokenID) public view returns (string memory) {\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenGiftIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensGift[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(_TokenID))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn AllTokensGift[i][1];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn \\\"{}\\\";\\n\\t}\\n\\nfunction UnWrapGift(string memory _TokenID)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\n       for (uint256 i = 0; i < _UserTokenIds; i++) {\\n\\t\\t\\tif (keccak256(bytes(AllUserToken[i][1])) == keccak256(bytes(_TokenID))){\\n\\t\\t\\t\\tAllUserToken[i][2] =\\\"False\\\";\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _UserTokenIds;\\n\\t}\\n\\n\\nfunction createUserToken(\\n\\t\\tstring memory _user,\\n\\t\\tstring memory _tokenid\\n\\t) private   {\\n\\t\\tAllUserToken[_UserTokenIds] =[\\n\\t\\t\\t_user,\\n\\t\\t\\t_tokenid,\\n\\t\\t\\t\\\"False\\\"\\n\\t\\t];\\n\\t\\t_UserTokenIds++;\\n\\t}\\n\\nfunction strToUint(string memory _str) public pure returns(uint256 res) {\\n\\n    for (uint256 i = 0; i < bytes(_str).length; i++) {\\n        if ((uint8(bytes(_str)[i]) - 48) < 0 || (uint8(bytes(_str)[i]) - 48) > 9) {\\n            return (0);\\n        }\\n        res += (uint8(bytes(_str)[i]) - 48) * 10**(bytes(_str).length - i - 1);\\n    }\\n\\n    return (res);\\n}\\n}\\n\\n\\n\",\"keccak256\":\"0x09c23b2220227610ce9a91e2bb5684cb5f3f98f264f7bc070f4177f5a1d41b33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005fe638038062005fe68339818101604052810190620000379190620001a3565b818181600090805190602001906200005192919062000075565b5080600190805190602001906200006a92919062000075565b5050505050620003ac565b8280546200008390620002bd565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b60006200013c620001368462000251565b62000228565b9050828152602081018484840111156200015b576200015a6200038c565b5b6200016884828562000287565b509392505050565b600082601f83011262000188576200018762000387565b5b81516200019a84826020860162000125565b91505092915050565b60008060408385031215620001bd57620001bc62000396565b5b600083015167ffffffffffffffff811115620001de57620001dd62000391565b5b620001ec8582860162000170565b925050602083015167ffffffffffffffff81111562000210576200020f62000391565b5b6200021e8582860162000170565b9150509250929050565b60006200023462000247565b9050620002428282620002f3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026f576200026e62000358565b5b6200027a826200039b565b9050602081019050919050565b60005b83811015620002a75780820151818401526020810190506200028a565b83811115620002b7576000848401525b50505050565b60006002820490506001821680620002d657607f821691505b60208210811415620002ed57620002ec62000329565b5b50919050565b620002fe826200039b565b810181811067ffffffffffffffff8211171562000320576200031f62000358565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b615c2a80620003bc6000396000f3fe608060405234801561001057600080fd5b506004361061030c5760003560e01c80637cedbc1e1161019d578063c5ef3ec5116100e9578063d8c23d34116100a2578063e257a94c1161007c578063e257a94c14610aa1578063e8736f4014610ad1578063e985e9c514610aef578063eb1d234d14610b1f5761030c565b8063d8c23d3414610a25578063e08033d314610a55578063e1af189e14610a715761030c565b8063c5ef3ec514610919578063c87b56dd14610949578063cd62ca1a14610979578063ce917591146109a9578063d45fc516146109d9578063d654e99314610a095761030c565b80639f9b376f11610156578063aed4796111610130578063aed479611461086d578063b10a5dfa1461089d578063b5dd0f5b146108cd578063b88d4fde146108fd5761030c565b80639f9b376f146107f1578063a0fd0c6a14610821578063a22cb465146108515761030c565b80637cedbc1e1461071b5780637eadfa6a1461074b5780638da5cb5b14610769578063932a196b1461078757806395d89b41146107b75780639dace298146107d55761030c565b806328520ab71161025c578063446a92e31161021557806361958158116101ef578063619581581461066f5780636352211e1461068b57806370a08231146106bb5780637411c4bb146106eb5761030c565b8063446a92e3146105df5780634eb083ec1461060f5780635154380a1461063f5761030c565b806328520ab7146104fb57806329ccdcad1461052b57806335011d901461055b5780633592dd801461058b5780633d4089c9146105a757806342842e0e146105c35761030c565b80630e1e27dd116102c957806318160ddd116102a357806318160ddd146104615780631e65e1171461047f578063209d72e6146104af57806323b872dd146104df5761030c565b80630e1e27dd146103f7578063144cbca6146104275780631677bf08146104455761030c565b8063015388681461031157806301ffc9a71461032d57806306d9a55c1461035d57806306fdde031461038d578063081812fc146103ab578063095ea7b3146103db575b600080fd5b61032b600480360381019061032691906147d1565b610b4f565b005b610347600480360381019061034291906145e2565b610b8f565b6040516103549190614f42565b60405180910390f35b610377600480360381019061037291906149b5565b610c71565b6040516103849190614f5d565b60405180910390f35b610395610d21565b6040516103a29190614f5d565b60405180910390f35b6103c560048036038101906103c091906147a4565b610db3565b6040516103d29190614e97565b60405180910390f35b6103f560048036038101906103f091906145a2565b610e38565b005b610411600480360381019061040c919061463c565b610f50565b60405161041e9190614f5d565b60405180910390f35b61042f6110b3565b60405161043c919061511f565b60405180910390f35b61045f600480360381019061045a91906147d1565b6110b9565b005b6104696110e5565b604051610476919061511f565b60405180910390f35b6104996004803603810190610494919061463c565b6110ef565b6040516104a69190614f20565b60405180910390f35b6104c960048036038101906104c4919061463c565b611313565b6040516104d69190614f5d565b60405180910390f35b6104f960048036038101906104f4919061441d565b611476565b005b610515600480360381019061051091906147d1565b6114d6565b604051610522919061511f565b60405180910390f35b6105456004803603810190610540919061463c565b6115af565b604051610552919061511f565b60405180910390f35b61057560048036038101906105709190614533565b6116a4565b604051610582919061511f565b60405180910390f35b6105a560048036038101906105a091906149f5565b611707565b005b6105c160048036038101906105bc91906147a4565b61174b565b005b6105dd60048036038101906105d8919061441d565b6118dd565b005b6105f960048036038101906105f491906147a4565b6118fd565b6040516106069190614f5d565b60405180910390f35b610629600480360381019061062491906147a4565b6119a2565b6040516106369190614f5d565b60405180910390f35b610659600480360381019061065491906147a4565b611a47565b6040516106669190614f20565b60405180910390f35b6106896004803603810190610684919061482d565b611bf7565b005b6106a560048036038101906106a091906147a4565b611c6e565b6040516106b29190614e97565b60405180910390f35b6106d560048036038101906106d091906143b0565b611d20565b6040516106e2919061511f565b60405180910390f35b61070560048036038101906107009190614685565b611dd8565b604051610712919061511f565b60405180910390f35b610735600480360381019061073091906147a4565b611eea565b6040516107429190614f5d565b60405180910390f35b610753611fa3565b604051610760919061511f565b60405180910390f35b610771611fad565b60405161077e9190614e97565b60405180910390f35b6107a1600480360381019061079c919061463c565b611fd3565b6040516107ae919061511f565b60405180910390f35b6107bf612056565b6040516107cc9190614f5d565b60405180910390f35b6107ef60048036038101906107ea91906148b8565b6120e8565b005b61080b600480360381019061080691906149b5565b612278565b6040516108189190614f5d565b60405180910390f35b61083b600480360381019061083691906147a4565b612328565b6040516108489190614efe565b60405180910390f35b61086b600480360381019061086691906144f3565b612408565b005b610887600480360381019061088291906147a4565b61241e565b6040516108949190614f20565b60405180910390f35b6108b760048036038101906108b291906149b5565b6125ce565b6040516108c49190614f5d565b60405180910390f35b6108e760048036038101906108e2919061463c565b61267e565b6040516108f49190614f5d565b60405180910390f35b61091760048036038101906109129190614470565b6127e1565b005b610933600480360381019061092e919061463c565b612843565b604051610940919061511f565b60405180910390f35b610963600480360381019061095e91906147a4565b612956565b6040516109709190614f5d565b60405180910390f35b610993600480360381019061098e919061463c565b612a0f565b6040516109a0919061511f565b60405180910390f35b6109c360048036038101906109be91906146fd565b612a92565b6040516109d0919061511f565b60405180910390f35b6109f360048036038101906109ee919061463c565b612bc7565b604051610a00919061511f565b60405180910390f35b610a236004803603810190610a1e91906149f5565b612c36565b005b610a3f6004803603810190610a3a91906147a4565b612c7a565b604051610a4c9190614f20565b60405180910390f35b610a6f6004803603810190610a6a91906147d1565b612ebf565b005b610a8b6004803603810190610a86919061463c565b612eeb565b604051610a989190614f20565b60405180910390f35b610abb6004803603810190610ab69190614685565b61311f565b604051610ac8919061511f565b60405180910390f35b610ad9613192565b604051610ae6919061511f565b60405180910390f35b610b096004803603810190610b0491906143dd565b613198565b604051610b169190614f42565b60405180910390f35b610b396004803603810190610b3491906147a4565b61322c565b604051610b469190614f20565b60405180910390f35b8060146000848152602001908152602001600020600060028110610b7657610b75615777565b5b019080519060200190610b8a929190614093565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610c5a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610c6a5750610c698261345f565b5b9050919050565b60106020528160005260406000208160028110610c8d57600080fd5b01600091509150508054610ca09061560d565b80601f0160208091040260200160405190810160405280929190818152602001828054610ccc9061560d565b8015610d195780601f10610cee57610100808354040283529160200191610d19565b820191906000526020600020905b815481529060010190602001808311610cfc57829003601f168201915b505050505081565b606060008054610d309061560d565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5c9061560d565b8015610da95780601f10610d7e57610100808354040283529160200191610da9565b820191906000526020600020905b815481529060010190602001808311610d8c57829003601f168201915b5050505050905090565b6000610dbe826134c9565b610dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df4906150bf565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610e4382611c6e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eab906150df565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610ed3613535565b73ffffffffffffffffffffffffffffffffffffffff161480610f025750610f0181610efc613535565b613198565b5b610f41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f389061503f565b60405180910390fd5b610f4b838361353d565b505050565b606060005b600954811015611074578280519060200120600e6000838152602001908152602001600020600160028110610f8d57610f8c615777565b5b01604051610f9b9190614e80565b6040518091039020141561106157600e6000828152602001908152602001600020600060028110610fcf57610fce615777565b5b018054610fdb9061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546110079061560d565b80156110545780601f1061102957610100808354040283529160200191611054565b820191906000526020600020905b81548152906001019060200180831161103757829003601f168201915b50505050509150506110ae565b808061106c90615670565b915050610f55565b506040518060400160405280600481526020017f6e6f6e650000000000000000000000000000000000000000000000000000000081525090505b919050565b600c5481565b806016600084815260200190815260200160002090805190602001906110e0929190614093565b505050565b6000600654905090565b606060008060005b60085481101561116d5784805190602001206015600083815260200190815260200160002060006003811061112f5761112e615777565b5b0160405161113d9190614e80565b6040518091039020141561115a57828061115690615670565b9350505b808061116590615670565b9150506110f7565b5060008267ffffffffffffffff81111561118a576111896157a6565b5b6040519080825280602002602001820160405280156111bd57816020015b60608152602001906001900390816111a85790505b50905060005b600854811015611307578580519060200120601560008381526020019081526020016000206000600381106111fb576111fa615777565b5b016040516112099190614e80565b604051809103902014156112f4576015600082815260200190815260200160002060016003811061123d5761123c615777565b5b0180546112499061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546112759061560d565b80156112c25780601f10611297576101008083540402835291602001916112c2565b820191906000526020600020905b8154815290600101906020018083116112a557829003601f168201915b50505050508284815181106112da576112d9615777565b5b602002602001018190525082806112f090615670565b9350505b80806112ff90615670565b9150506111c3565b50809350505050919050565b606060005b600b54811015611437578280519060200120601060008381526020019081526020016000206000600281106113505761134f615777565b5b0160405161135e9190614e80565b60405180910390201415611424576010600082815260200190815260200160002060016002811061139257611391615777565b5b01805461139e9061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546113ca9061560d565b80156114175780601f106113ec57610100808354040283529160200191611417565b820191906000526020600020905b8154815290600101906020018083116113fa57829003601f168201915b5050505050915050611471565b808061142f90615670565b915050611318565b506040518060400160405280600281526020017f7b7d00000000000000000000000000000000000000000000000000000000000081525090505b919050565b611487611481613535565b826135f6565b6114c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bd906150ff565b60405180910390fd5b6114d18383836136d4565b505050565b600080600090505b6009548110156115a3576114f18461393b565b80519060200120600e600083815260200190815260200160002060006002811061151e5761151d615777565b5b0160405161152c9190614e80565b604051809103902014801561158257508280519060200120600e600083815260200190815260200160002060016002811061156a57611569615777565b5b016040516115789190614e80565b6040518091039020145b1561159057809150506115a9565b808061159b90615670565b9150506114de565b50600090505b92915050565b600080600090505b600d54811015611698578280519060200120601160008381526020019081526020016000206001600381106115ef576115ee615777565b5b016040516115fd9190614e80565b60405180910390201415611685576040518060400160405280600581526020017f46616c73650000000000000000000000000000000000000000000000000000008152506011600083815260200190815260200160002060026003811061166757611666615777565b5b01908051906020019061167b929190614093565b508091505061169f565b808061169090615670565b9150506115b7565b50600d5490505b919050565b60006116b284600654613a9c565b6116be60065484610b4f565b6116cb6009548385611707565b600660008154809291906116de90615670565b9190505550600960008154809291906116f690615670565b919050555060065490509392505050565b604051806040016040528061171b8461393b565b815260200182815250600e6000858152602001908152602001600020906002611745929190614119565b50505050565b600061175682612c7a565b905060005b600c548110156118d857600061178a83838151811061177d5761177c615777565b5b6020026020010151611fd3565b90506000601460008381526020019081526020016000206001600281106117b4576117b3615777565b5b0180546117c09061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546117ec9061560d565b80156118395780601f1061180e57610100808354040283529160200191611839565b820191906000526020600020905b81548152906001019060200180831161181c57829003601f168201915b505050505090506118528161184d8461393b565b613c76565b6040518060400160405280600881526020017f46696e6973686564000000000000000000000000000000000000000000000000815250601560008781526020019081526020016000206002600381106118ae576118ad615777565b5b0190805190602001906118c2929190614093565b50505080806118d090615670565b91505061175b565b505050565b6118f8838383604051806020016040528060008152506127e1565b505050565b606060136000838152602001908152602001600020805461191d9061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546119499061560d565b80156119965780601f1061196b57610100808354040283529160200191611996565b820191906000526020600020905b81548152906001019060200180831161197957829003601f168201915b50505050509050919050565b60606016600083815260200190815260200160002080546119c29061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546119ee9061560d565b8015611a3b5780601f10611a1057610100808354040283529160200191611a3b565b820191906000526020600020905b815481529060010190602001808311611a1e57829003601f168201915b50505050509050919050565b60606000600a67ffffffffffffffff811115611a6657611a656157a6565b5b604051908082528060200260200182016040528015611a9957816020015b6060815260200190600190039081611a845790505b5090506000805b600a54811015611bec57611ab38561393b565b80519060200120600f6000838152602001908152602001600020600060028110611ae057611adf615777565b5b01604051611aee9190614e80565b60405180910390201415611bd957600f6000828152602001908152602001600020600160028110611b2257611b21615777565b5b018054611b2e9061560d565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5a9061560d565b8015611ba75780601f10611b7c57610100808354040283529160200191611ba7565b820191906000526020600020905b815481529060010190602001808311611b8a57829003601f168201915b5050505050838381518110611bbf57611bbe615777565b5b60200260200101819052508180611bd590615670565b9250505b8080611be490615670565b915050611aa0565b508192505050919050565b60405180606001604052808381526020018281526020016040518060400160405280600581526020017f46616c736500000000000000000000000000000000000000000000000000000081525081525060156000858152602001908152602001600020906003611c6892919061416c565b50505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0e9061507f565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d889061505f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600090505b600b54811015611e8c57838051906020012060106000838152602001908152602001600020600060028110611e1857611e17615777565b5b01604051611e269190614e80565b60405180910390201415611e79578260106000838152602001908152602001600020600160028110611e5b57611e5a615777565b5b019080519060200190611e6f929190614093565b5080915050611ee4565b8080611e8490615670565b915050611de0565b5060405180604001604052808481526020018381525060106000600b548152602001908152602001600020906002611ec5929190614119565b50600b6000815480929190611ed990615670565b9190505550600b5490505b92915050565b606060126000838152602001908152602001600020600060028110611f1257611f11615777565b5b018054611f1e9061560d565b80601f0160208091040260200160405190810160405280929190818152602001828054611f4a9061560d565b8015611f975780601f10611f6c57610100808354040283529160200191611f97565b820191906000526020600020905b815481529060010190602001808311611f7a57829003601f168201915b50505050509050919050565b6000600854905090565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090505b60065481101561204b5782805190602001206014600083815260200190815260200160002060006002811061201357612012615777565b5b016040516120219190614e80565b604051809103902014156120385780915050612051565b808061204390615670565b915050611fdb565b50600090505b919050565b6060600180546120659061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546120919061560d565b80156120de5780601f106120b3576101008083540402835291602001916120de565b820191906000526020600020905b8154815290600101906020018083116120c157829003601f168201915b5050505050905090565b60006121a383601460008a815260200190815260200160002060006002811061211457612113615777565b5b0180546121209061560d565b80601f016020809104026020016040519081016040528092919081815260200182805461214c9061560d565b80156121995780601f1061216e57610100808354040283529160200191612199565b820191906000526020600020905b81548152906001019060200180831161217c57829003601f168201915b50505050506114d6565b905084601460008981526020019081526020016000206000600281106121cc576121cb615777565b5b0190805190602001906121e0929190614093565b50836014600089815260200190815260200160002060016002811061220857612207615777565b5b01908051906020019061221c929190614093565b50612228818487611707565b61223283836110b9565b61223f600a548888612c36565b600a600081548092919061225290615670565b91905055506007600081548092919061226a90615670565b919050555050505050505050565b6011602052816000526040600020816003811061229457600080fd5b016000915091505080546122a79061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546122d39061560d565b80156123205780601f106122f557610100808354040283529160200191612320565b820191906000526020600020905b81548152906001019060200180831161230357829003601f168201915b505050505081565b6123306141bf565b60156000838152602001908152602001600020600380602002604051908101604052809291906000905b828210156123fd5783820180546123709061560d565b80601f016020809104026020016040519081016040528092919081815260200182805461239c9061560d565b80156123e95780601f106123be576101008083540402835291602001916123e9565b820191906000526020600020905b8154815290600101906020018083116123cc57829003601f168201915b50505050508152602001906001019061235a565b505050509050919050565b61241a612413613535565b8383613d06565b5050565b60606000600a67ffffffffffffffff81111561243d5761243c6157a6565b5b60405190808252806020026020018201604052801561247057816020015b606081526020019060019003908161245b5790505b5090506000805b600a548110156125c35761248a8561393b565b80519060200120600f60008381526020019081526020016000206000600281106124b7576124b6615777565b5b016040516124c59190614e80565b604051809103902014156125b057600f60008281526020019081526020016000206001600281106124f9576124f8615777565b5b0180546125059061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546125319061560d565b801561257e5780601f106125535761010080835404028352916020019161257e565b820191906000526020600020905b81548152906001019060200180831161256157829003601f168201915b505050505083838151811061259657612595615777565b5b602002602001018190525081806125ac90615670565b9250505b80806125bb90615670565b915050612477565b508192505050919050565b601260205281600052604060002081600281106125ea57600080fd5b016000915091505080546125fd9061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546126299061560d565b80156126765780601f1061264b57610100808354040283529160200191612676565b820191906000526020600020905b81548152906001019060200180831161265957829003601f168201915b505050505081565b606060005b600d548110156127a2578280519060200120601160008381526020019081526020016000206001600381106126bb576126ba615777565b5b016040516126c99190614e80565b6040518091039020141561278f57601160008281526020019081526020016000206002600381106126fd576126fc615777565b5b0180546127099061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546127359061560d565b80156127825780601f1061275757610100808354040283529160200191612782565b820191906000526020600020905b81548152906001019060200180831161276557829003601f168201915b50505050509150506127dc565b808061279a90615670565b915050612683565b506040518060400160405280600581526020017f46616c736500000000000000000000000000000000000000000000000000000081525090505b919050565b6127f26127ec613535565b836135f6565b612831576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612828906150ff565b60405180910390fd5b61283d84848484613e73565b50505050565b600080600090505b825181101561294f576000603084838151811061286b5761286a615777565b5b602001015160f81c60f81b60f81c6128839190615516565b60ff1610806128c15750600960308483815181106128a4576128a3615777565b5b602001015160f81c60f81b60f81c6128bc9190615516565b60ff16115b156128d0576000915050612951565b60018184516128df91906154e2565b6128e991906154e2565b600a6128f5919061536a565b603084838151811061290a57612909615777565b5b602001015160f81c60f81b60f81c6129229190615516565b60ff1661292f9190615488565b8261293a9190615290565b9150808061294790615670565b91505061284b565b505b919050565b60606014600083815260200190815260200160002060006002811061297e5761297d615777565b5b01805461298a9061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546129b69061560d565b8015612a035780601f106129d857610100808354040283529160200191612a03565b820191906000526020600020905b8154815290600101906020018083116129e657829003601f168201915b50505050509050919050565b600080600090505b600854811015612a8757828051906020012060156000838152602001908152602001600020600160038110612a4f57612a4e615777565b5b01604051612a5d9190614e80565b60405180910390201415612a745780915050612a8d565b8080612a7f90615670565b915050612a17565b50600090505b919050565b600080600090505b600d54811015612baf57848051906020012060116000838152602001908152602001600020600160038110612ad257612ad1615777565b5b01604051612ae09190614e80565b60405180910390201415612b9c578360116000838152602001908152602001600020600060038110612b1557612b14615777565b5b019080519060200190612b29929190614093565b506040518060400160405280600481526020017f547275650000000000000000000000000000000000000000000000000000000081525060116000838152602001908152602001600020600260038110612b8657612b85615777565b5b019080519060200190612b9a929190614093565b505b8080612ba790615670565b915050612a9a565b50612bba8483611dd8565b50600b5490509392505050565b600080600090505b600754811015612c2b57828051906020012060136000838152602001908152602001600020604051612c019190614e80565b60405180910390201415612c185780915050612c31565b8080612c2390615670565b915050612bcf565b50600090505b919050565b6040518060400160405280612c4a8461393b565b815260200182815250600f6000858152602001908152602001600020906002612c74929190614119565b50505050565b60606000805b600954811015612cfe57612c938461393b565b80519060200120600e6000838152602001908152602001600020600060028110612cc057612cbf615777565b5b01604051612cce9190614e80565b60405180910390201415612ceb578180612ce790615670565b9250505b8080612cf690615670565b915050612c80565b5060008167ffffffffffffffff811115612d1b57612d1a6157a6565b5b604051908082528060200260200182016040528015612d4e57816020015b6060815260200190600190039081612d395790505b5090506000600c8190555060005b600954811015612eb457612d6f8561393b565b80519060200120600e6000838152602001908152602001600020600060028110612d9c57612d9b615777565b5b01604051612daa9190614e80565b60405180910390201415612ea157600e6000828152602001908152602001600020600160028110612dde57612ddd615777565b5b018054612dea9061560d565b80601f0160208091040260200160405190810160405280929190818152602001828054612e169061560d565b8015612e635780601f10612e3857610100808354040283529160200191612e63565b820191906000526020600020905b815481529060010190602001808311612e4657829003601f168201915b505050505082600c5481518110612e7d57612e7c615777565b5b6020026020010181905250600c6000815480929190612e9b90615670565b91905055505b8080612eac90615670565b915050612d5c565b508092505050919050565b80601360008481526020019081526020016000209080519060200190612ee6929190614093565b505050565b606060008060005b600d54811015612f6957848051906020012060116000838152602001908152602001600020600060038110612f2b57612f2a615777565b5b01604051612f399190614e80565b60405180910390201415612f56578280612f5290615670565b9350505b8080612f6190615670565b915050612ef3565b5060008267ffffffffffffffff811115612f8657612f856157a6565b5b604051908082528060200260200182016040528015612fb957816020015b6060815260200190600190039081612fa45790505b50905060005b600d5481101561311357858051906020012060116000838152602001908152602001600020600060038110612ff757612ff6615777565b5b016040516130059190614e80565b60405180910390201415613100576130d36130ce6011600084815260200190815260200160002060016003811061303f5761303e615777565b5b01805461304b9061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546130779061560d565b80156130c45780601f10613099576101008083540402835291602001916130c4565b820191906000526020600020905b8154815290600101906020018083116130a757829003601f168201915b5050505050612843565b612956565b8284815181106130e6576130e5615777565b5b602002602001018190525082806130fc90615670565b9350505b808061310b90615670565b915050612fbf565b50809350505050919050565b600061312e6008548484611bf7565b61316f6008546040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152506110b9565b6008600081548092919061318290615670565b9190505550600854905092915050565b600d5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606000805b6009548110156132b0576132458461393b565b80519060200120600e600083815260200190815260200160002060006002811061327257613271615777565b5b016040516132809190614e80565b6040518091039020141561329d57818061329990615670565b9250505b80806132a890615670565b915050613232565b5060008167ffffffffffffffff8111156132cd576132cc6157a6565b5b60405190808252806020026020018201604052801561330057816020015b60608152602001906001900390816132eb5790505b5090506000805b6009548110156134535761331a8661393b565b80519060200120600e600083815260200190815260200160002060006002811061334757613346615777565b5b016040516133559190614e80565b6040518091039020141561344057600e600082815260200190815260200160002060016002811061338957613388615777565b5b0180546133959061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546133c19061560d565b801561340e5780601f106133e35761010080835404028352916020019161340e565b820191906000526020600020905b8154815290600101906020018083116133f157829003601f168201915b505050505083838151811061342657613425615777565b5b6020026020010181905250818061343c90615670565b9250505b808061344b90615670565b915050613307565b50819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166135b083611c6e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000613601826134c9565b613640576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136379061501f565b60405180910390fd5b600061364b83611c6e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061368d575061368c8185613198565b5b806136cb57508373ffffffffffffffffffffffffffffffffffffffff166136b384610db3565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166136f482611c6e565b73ffffffffffffffffffffffffffffffffffffffff161461374a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161374190614f9f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156137ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137b190614fdf565b60405180910390fd5b6137c5838383613ecf565b6137d060008261353d565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461382091906154e2565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546138779190615290565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4613936838383613ed4565b505050565b60606000821415613983576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613a97565b600082905060005b600082146139b557808061399e90615670565b915050600a826139ae91906152e6565b915061398b565b60008167ffffffffffffffff8111156139d1576139d06157a6565b5b6040519080825280601f01601f191660200182016040528015613a035781602001600182028036833780820191505090505b5090505b60008514613a9057600182613a1c91906154e2565b9150600a85613a2b91906156b9565b6030613a379190615290565b60f81b818381518110613a4d57613a4c615777565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85613a8991906152e6565b9450613a07565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b039061509f565b60405180910390fd5b613b15816134c9565b15613b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b4c90614fbf565b60405180910390fd5b613b6160008383613ecf565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613bb19190615290565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4613c7260008383613ed4565b5050565b60405180606001604052808381526020018281526020016040518060400160405280600581526020017f46616c736500000000000000000000000000000000000000000000000000000081525081525060116000600d548152602001908152602001600020906003613ce992919061416c565b50600d6000815480929190613cfd90615670565b91905055505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613d75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d6c90614fff565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051613e669190614f42565b60405180910390a3505050565b613e7e8484846136d4565b613e8a84848484613ed9565b613ec9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ec090614f7f565b60405180910390fd5b50505050565b505050565b505050565b6000613efa8473ffffffffffffffffffffffffffffffffffffffff16614070565b15614063578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02613f23613535565b8786866040518563ffffffff1660e01b8152600401613f459493929190614eb2565b602060405180830381600087803b158015613f5f57600080fd5b505af1925050508015613f9057506040513d601f19601f82011682018060405250810190613f8d919061460f565b60015b614013573d8060008114613fc0576040519150601f19603f3d011682016040523d82523d6000602084013e613fc5565b606091505b5060008151141561400b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161400290614f7f565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050614068565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461409f9061560d565b90600052602060002090601f0160209004810192826140c15760008555614108565b82601f106140da57805160ff1916838001178555614108565b82800160010185558215614108579182015b828111156141075782518255916020019190600101906140ec565b5b50905061411591906141e6565b5090565b826002810192821561415b579160200282015b8281111561415a57825182908051906020019061414a929190614093565b509160200191906001019061412c565b5b5090506141689190614203565b5090565b82600381019282156141ae579160200282015b828111156141ad57825182908051906020019061419d929190614093565b509160200191906001019061417f565b5b5090506141bb9190614203565b5090565b60405180606001604052806003905b60608152602001906001900390816141ce5790505090565b5b808211156141ff5760008160009055506001016141e7565b5090565b5b80821115614223576000818161421a9190614227565b50600101614204565b5090565b5080546142339061560d565b6000825580601f106142455750614264565b601f01602090049060005260206000209081019061426391906141e6565b5b50565b600061427a6142758461515f565b61513a565b905082815260208101848484011115614296576142956157da565b5b6142a18482856155cb565b509392505050565b60006142bc6142b784615190565b61513a565b9050828152602081018484840111156142d8576142d76157da565b5b6142e38482856155cb565b509392505050565b6000813590506142fa81615b98565b92915050565b60008135905061430f81615baf565b92915050565b60008135905061432481615bc6565b92915050565b60008151905061433981615bc6565b92915050565b600082601f830112614354576143536157d5565b5b8135614364848260208601614267565b91505092915050565b600082601f830112614382576143816157d5565b5b81356143928482602086016142a9565b91505092915050565b6000813590506143aa81615bdd565b92915050565b6000602082840312156143c6576143c56157e4565b5b60006143d4848285016142eb565b91505092915050565b600080604083850312156143f4576143f36157e4565b5b6000614402858286016142eb565b9250506020614413858286016142eb565b9150509250929050565b600080600060608486031215614436576144356157e4565b5b6000614444868287016142eb565b9350506020614455868287016142eb565b92505060406144668682870161439b565b9150509250925092565b6000806000806080858703121561448a576144896157e4565b5b6000614498878288016142eb565b94505060206144a9878288016142eb565b93505060406144ba8782880161439b565b925050606085013567ffffffffffffffff8111156144db576144da6157df565b5b6144e78782880161433f565b91505092959194509250565b6000806040838503121561450a576145096157e4565b5b6000614518858286016142eb565b925050602061452985828601614300565b9150509250929050565b60008060006060848603121561454c5761454b6157e4565b5b600061455a868287016142eb565b935050602084013567ffffffffffffffff81111561457b5761457a6157df565b5b6145878682870161436d565b92505060406145988682870161439b565b9150509250925092565b600080604083850312156145b9576145b86157e4565b5b60006145c7858286016142eb565b92505060206145d88582860161439b565b9150509250929050565b6000602082840312156145f8576145f76157e4565b5b600061460684828501614315565b91505092915050565b600060208284031215614625576146246157e4565b5b60006146338482850161432a565b91505092915050565b600060208284031215614652576146516157e4565b5b600082013567ffffffffffffffff8111156146705761466f6157df565b5b61467c8482850161436d565b91505092915050565b6000806040838503121561469c5761469b6157e4565b5b600083013567ffffffffffffffff8111156146ba576146b96157df565b5b6146c68582860161436d565b925050602083013567ffffffffffffffff8111156146e7576146e66157df565b5b6146f38582860161436d565b9150509250929050565b600080600060608486031215614716576147156157e4565b5b600084013567ffffffffffffffff811115614734576147336157df565b5b6147408682870161436d565b935050602084013567ffffffffffffffff811115614761576147606157df565b5b61476d8682870161436d565b925050604084013567ffffffffffffffff81111561478e5761478d6157df565b5b61479a8682870161436d565b9150509250925092565b6000602082840312156147ba576147b96157e4565b5b60006147c88482850161439b565b91505092915050565b600080604083850312156147e8576147e76157e4565b5b60006147f68582860161439b565b925050602083013567ffffffffffffffff811115614817576148166157df565b5b6148238582860161436d565b9150509250929050565b600080600060608486031215614846576148456157e4565b5b60006148548682870161439b565b935050602084013567ffffffffffffffff811115614875576148746157df565b5b6148818682870161436d565b925050604084013567ffffffffffffffff8111156148a2576148a16157df565b5b6148ae8682870161436d565b9150509250925092565b60008060008060008060c087890312156148d5576148d46157e4565b5b60006148e389828a0161439b565b965050602087013567ffffffffffffffff811115614904576149036157df565b5b61491089828a0161436d565b955050604087013567ffffffffffffffff811115614931576149306157df565b5b61493d89828a0161436d565b945050606087013567ffffffffffffffff81111561495e5761495d6157df565b5b61496a89828a0161436d565b935050608061497b89828a0161439b565b92505060a087013567ffffffffffffffff81111561499c5761499b6157df565b5b6149a889828a0161436d565b9150509295509295509295565b600080604083850312156149cc576149cb6157e4565b5b60006149da8582860161439b565b92505060206149eb8582860161439b565b9150509250929050565b600080600060608486031215614a0e57614a0d6157e4565b5b6000614a1c8682870161439b565b9350506020614a2d8682870161439b565b925050604084013567ffffffffffffffff811115614a4e57614a4d6157df565b5b614a5a8682870161436d565b9150509250925092565b6000614a708383614c38565b905092915050565b614a818161554a565b82525050565b6000614a92826151f0565b614a9c8185615236565b935083602082028501614aae856151c1565b8060005b85811015614aea5784840389528151614acb8582614a64565b9450614ad68361521c565b925060208a01995050600181019050614ab2565b50829750879550505050505092915050565b6000614b07826151fb565b614b118185615241565b935083602082028501614b23856151cb565b8060005b85811015614b5f5784840389528151614b408582614a64565b9450614b4b83615229565b925060208a01995050600181019050614b27565b50829750879550505050505092915050565b614b7a8161555c565b82525050565b6000614b8b82615206565b614b958185615252565b9350614ba58185602086016155da565b614bae816157e9565b840191505092915050565b60008154614bc68161560d565b614bd08186615263565b94506001821660008114614beb5760018114614bfc57614c2f565b60ff19831686528186019350614c2f565b614c05856151db565b60005b83811015614c2757815481890152600182019150602081019050614c08565b838801955050505b50505092915050565b6000614c4382615211565b614c4d818561526e565b9350614c5d8185602086016155da565b614c66816157e9565b840191505092915050565b6000614c7c82615211565b614c86818561527f565b9350614c968185602086016155da565b614c9f816157e9565b840191505092915050565b6000614cb760328361527f565b9150614cc282615807565b604082019050919050565b6000614cda60258361527f565b9150614ce582615856565b604082019050919050565b6000614cfd601c8361527f565b9150614d08826158a5565b602082019050919050565b6000614d2060248361527f565b9150614d2b826158ce565b604082019050919050565b6000614d4360198361527f565b9150614d4e8261591d565b602082019050919050565b6000614d66602c8361527f565b9150614d7182615946565b604082019050919050565b6000614d8960388361527f565b9150614d9482615995565b604082019050919050565b6000614dac602a8361527f565b9150614db7826159e4565b604082019050919050565b6000614dcf60298361527f565b9150614dda82615a33565b604082019050919050565b6000614df260208361527f565b9150614dfd82615a82565b602082019050919050565b6000614e15602c8361527f565b9150614e2082615aab565b604082019050919050565b6000614e3860218361527f565b9150614e4382615afa565b604082019050919050565b6000614e5b60318361527f565b9150614e6682615b49565b604082019050919050565b614e7a816155b4565b82525050565b6000614e8c8284614bb9565b915081905092915050565b6000602082019050614eac6000830184614a78565b92915050565b6000608082019050614ec76000830187614a78565b614ed46020830186614a78565b614ee16040830185614e71565b8181036060830152614ef38184614b80565b905095945050505050565b60006020820190508181036000830152614f188184614a87565b905092915050565b60006020820190508181036000830152614f3a8184614afc565b905092915050565b6000602082019050614f576000830184614b71565b92915050565b60006020820190508181036000830152614f778184614c71565b905092915050565b60006020820190508181036000830152614f9881614caa565b9050919050565b60006020820190508181036000830152614fb881614ccd565b9050919050565b60006020820190508181036000830152614fd881614cf0565b9050919050565b60006020820190508181036000830152614ff881614d13565b9050919050565b6000602082019050818103600083015261501881614d36565b9050919050565b6000602082019050818103600083015261503881614d59565b9050919050565b6000602082019050818103600083015261505881614d7c565b9050919050565b6000602082019050818103600083015261507881614d9f565b9050919050565b6000602082019050818103600083015261509881614dc2565b9050919050565b600060208201905081810360008301526150b881614de5565b9050919050565b600060208201905081810360008301526150d881614e08565b9050919050565b600060208201905081810360008301526150f881614e2b565b9050919050565b6000602082019050818103600083015261511881614e4e565b9050919050565b60006020820190506151346000830184614e71565b92915050565b6000615144615155565b9050615150828261563f565b919050565b6000604051905090565b600067ffffffffffffffff82111561517a576151796157a6565b5b615183826157e9565b9050602081019050919050565b600067ffffffffffffffff8211156151ab576151aa6157a6565b5b6151b4826157e9565b9050602081019050919050565b6000819050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600060039050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061529b826155b4565b91506152a6836155b4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156152db576152da6156ea565b5b828201905092915050565b60006152f1826155b4565b91506152fc836155b4565b92508261530c5761530b615719565b5b828204905092915050565b6000808291508390505b60018511156153615780860481111561533d5761533c6156ea565b5b600185161561534c5780820291505b808102905061535a856157fa565b9450615321565b94509492505050565b6000615375826155b4565b9150615380836155b4565b92506153ad7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846153b5565b905092915050565b6000826153c55760019050615481565b816153d35760009050615481565b81600181146153e957600281146153f357615422565b6001915050615481565b60ff841115615405576154046156ea565b5b8360020a91508482111561541c5761541b6156ea565b5b50615481565b5060208310610133831016604e8410600b84101617156154575782820a905083811115615452576154516156ea565b5b615481565b6154648484846001615317565b9250905081840481111561547b5761547a6156ea565b5b81810290505b9392505050565b6000615493826155b4565b915061549e836155b4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156154d7576154d66156ea565b5b828202905092915050565b60006154ed826155b4565b91506154f8836155b4565b92508282101561550b5761550a6156ea565b5b828203905092915050565b6000615521826155be565b915061552c836155be565b92508282101561553f5761553e6156ea565b5b828203905092915050565b600061555582615594565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156155f85780820151818401526020810190506155dd565b83811115615607576000848401525b50505050565b6000600282049050600182168061562557607f821691505b6020821081141561563957615638615748565b5b50919050565b615648826157e9565b810181811067ffffffffffffffff82111715615667576156666157a6565b5b80604052505050565b600061567b826155b4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156156ae576156ad6156ea565b5b600182019050919050565b60006156c4826155b4565b91506156cf836155b4565b9250826156df576156de615719565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b615ba18161554a565b8114615bac57600080fd5b50565b615bb88161555c565b8114615bc357600080fd5b50565b615bcf81615568565b8114615bda57600080fd5b50565b615be6816155b4565b8114615bf157600080fd5b5056fea26469706673582212207bd311e52145494765e1bd459c70806b459288341465f615b4acadbb07f1db5a64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030c5760003560e01c80637cedbc1e1161019d578063c5ef3ec5116100e9578063d8c23d34116100a2578063e257a94c1161007c578063e257a94c14610aa1578063e8736f4014610ad1578063e985e9c514610aef578063eb1d234d14610b1f5761030c565b8063d8c23d3414610a25578063e08033d314610a55578063e1af189e14610a715761030c565b8063c5ef3ec514610919578063c87b56dd14610949578063cd62ca1a14610979578063ce917591146109a9578063d45fc516146109d9578063d654e99314610a095761030c565b80639f9b376f11610156578063aed4796111610130578063aed479611461086d578063b10a5dfa1461089d578063b5dd0f5b146108cd578063b88d4fde146108fd5761030c565b80639f9b376f146107f1578063a0fd0c6a14610821578063a22cb465146108515761030c565b80637cedbc1e1461071b5780637eadfa6a1461074b5780638da5cb5b14610769578063932a196b1461078757806395d89b41146107b75780639dace298146107d55761030c565b806328520ab71161025c578063446a92e31161021557806361958158116101ef578063619581581461066f5780636352211e1461068b57806370a08231146106bb5780637411c4bb146106eb5761030c565b8063446a92e3146105df5780634eb083ec1461060f5780635154380a1461063f5761030c565b806328520ab7146104fb57806329ccdcad1461052b57806335011d901461055b5780633592dd801461058b5780633d4089c9146105a757806342842e0e146105c35761030c565b80630e1e27dd116102c957806318160ddd116102a357806318160ddd146104615780631e65e1171461047f578063209d72e6146104af57806323b872dd146104df5761030c565b80630e1e27dd146103f7578063144cbca6146104275780631677bf08146104455761030c565b8063015388681461031157806301ffc9a71461032d57806306d9a55c1461035d57806306fdde031461038d578063081812fc146103ab578063095ea7b3146103db575b600080fd5b61032b600480360381019061032691906147d1565b610b4f565b005b610347600480360381019061034291906145e2565b610b8f565b6040516103549190614f42565b60405180910390f35b610377600480360381019061037291906149b5565b610c71565b6040516103849190614f5d565b60405180910390f35b610395610d21565b6040516103a29190614f5d565b60405180910390f35b6103c560048036038101906103c091906147a4565b610db3565b6040516103d29190614e97565b60405180910390f35b6103f560048036038101906103f091906145a2565b610e38565b005b610411600480360381019061040c919061463c565b610f50565b60405161041e9190614f5d565b60405180910390f35b61042f6110b3565b60405161043c919061511f565b60405180910390f35b61045f600480360381019061045a91906147d1565b6110b9565b005b6104696110e5565b604051610476919061511f565b60405180910390f35b6104996004803603810190610494919061463c565b6110ef565b6040516104a69190614f20565b60405180910390f35b6104c960048036038101906104c4919061463c565b611313565b6040516104d69190614f5d565b60405180910390f35b6104f960048036038101906104f4919061441d565b611476565b005b610515600480360381019061051091906147d1565b6114d6565b604051610522919061511f565b60405180910390f35b6105456004803603810190610540919061463c565b6115af565b604051610552919061511f565b60405180910390f35b61057560048036038101906105709190614533565b6116a4565b604051610582919061511f565b60405180910390f35b6105a560048036038101906105a091906149f5565b611707565b005b6105c160048036038101906105bc91906147a4565b61174b565b005b6105dd60048036038101906105d8919061441d565b6118dd565b005b6105f960048036038101906105f491906147a4565b6118fd565b6040516106069190614f5d565b60405180910390f35b610629600480360381019061062491906147a4565b6119a2565b6040516106369190614f5d565b60405180910390f35b610659600480360381019061065491906147a4565b611a47565b6040516106669190614f20565b60405180910390f35b6106896004803603810190610684919061482d565b611bf7565b005b6106a560048036038101906106a091906147a4565b611c6e565b6040516106b29190614e97565b60405180910390f35b6106d560048036038101906106d091906143b0565b611d20565b6040516106e2919061511f565b60405180910390f35b61070560048036038101906107009190614685565b611dd8565b604051610712919061511f565b60405180910390f35b610735600480360381019061073091906147a4565b611eea565b6040516107429190614f5d565b60405180910390f35b610753611fa3565b604051610760919061511f565b60405180910390f35b610771611fad565b60405161077e9190614e97565b60405180910390f35b6107a1600480360381019061079c919061463c565b611fd3565b6040516107ae919061511f565b60405180910390f35b6107bf612056565b6040516107cc9190614f5d565b60405180910390f35b6107ef60048036038101906107ea91906148b8565b6120e8565b005b61080b600480360381019061080691906149b5565b612278565b6040516108189190614f5d565b60405180910390f35b61083b600480360381019061083691906147a4565b612328565b6040516108489190614efe565b60405180910390f35b61086b600480360381019061086691906144f3565b612408565b005b610887600480360381019061088291906147a4565b61241e565b6040516108949190614f20565b60405180910390f35b6108b760048036038101906108b291906149b5565b6125ce565b6040516108c49190614f5d565b60405180910390f35b6108e760048036038101906108e2919061463c565b61267e565b6040516108f49190614f5d565b60405180910390f35b61091760048036038101906109129190614470565b6127e1565b005b610933600480360381019061092e919061463c565b612843565b604051610940919061511f565b60405180910390f35b610963600480360381019061095e91906147a4565b612956565b6040516109709190614f5d565b60405180910390f35b610993600480360381019061098e919061463c565b612a0f565b6040516109a0919061511f565b60405180910390f35b6109c360048036038101906109be91906146fd565b612a92565b6040516109d0919061511f565b60405180910390f35b6109f360048036038101906109ee919061463c565b612bc7565b604051610a00919061511f565b60405180910390f35b610a236004803603810190610a1e91906149f5565b612c36565b005b610a3f6004803603810190610a3a91906147a4565b612c7a565b604051610a4c9190614f20565b60405180910390f35b610a6f6004803603810190610a6a91906147d1565b612ebf565b005b610a8b6004803603810190610a86919061463c565b612eeb565b604051610a989190614f20565b60405180910390f35b610abb6004803603810190610ab69190614685565b61311f565b604051610ac8919061511f565b60405180910390f35b610ad9613192565b604051610ae6919061511f565b60405180910390f35b610b096004803603810190610b0491906143dd565b613198565b604051610b169190614f42565b60405180910390f35b610b396004803603810190610b3491906147a4565b61322c565b604051610b469190614f20565b60405180910390f35b8060146000848152602001908152602001600020600060028110610b7657610b75615777565b5b019080519060200190610b8a929190614093565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610c5a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610c6a5750610c698261345f565b5b9050919050565b60106020528160005260406000208160028110610c8d57600080fd5b01600091509150508054610ca09061560d565b80601f0160208091040260200160405190810160405280929190818152602001828054610ccc9061560d565b8015610d195780601f10610cee57610100808354040283529160200191610d19565b820191906000526020600020905b815481529060010190602001808311610cfc57829003601f168201915b505050505081565b606060008054610d309061560d565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5c9061560d565b8015610da95780601f10610d7e57610100808354040283529160200191610da9565b820191906000526020600020905b815481529060010190602001808311610d8c57829003601f168201915b5050505050905090565b6000610dbe826134c9565b610dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df4906150bf565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610e4382611c6e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eab906150df565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610ed3613535565b73ffffffffffffffffffffffffffffffffffffffff161480610f025750610f0181610efc613535565b613198565b5b610f41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f389061503f565b60405180910390fd5b610f4b838361353d565b505050565b606060005b600954811015611074578280519060200120600e6000838152602001908152602001600020600160028110610f8d57610f8c615777565b5b01604051610f9b9190614e80565b6040518091039020141561106157600e6000828152602001908152602001600020600060028110610fcf57610fce615777565b5b018054610fdb9061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546110079061560d565b80156110545780601f1061102957610100808354040283529160200191611054565b820191906000526020600020905b81548152906001019060200180831161103757829003601f168201915b50505050509150506110ae565b808061106c90615670565b915050610f55565b506040518060400160405280600481526020017f6e6f6e650000000000000000000000000000000000000000000000000000000081525090505b919050565b600c5481565b806016600084815260200190815260200160002090805190602001906110e0929190614093565b505050565b6000600654905090565b606060008060005b60085481101561116d5784805190602001206015600083815260200190815260200160002060006003811061112f5761112e615777565b5b0160405161113d9190614e80565b6040518091039020141561115a57828061115690615670565b9350505b808061116590615670565b9150506110f7565b5060008267ffffffffffffffff81111561118a576111896157a6565b5b6040519080825280602002602001820160405280156111bd57816020015b60608152602001906001900390816111a85790505b50905060005b600854811015611307578580519060200120601560008381526020019081526020016000206000600381106111fb576111fa615777565b5b016040516112099190614e80565b604051809103902014156112f4576015600082815260200190815260200160002060016003811061123d5761123c615777565b5b0180546112499061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546112759061560d565b80156112c25780601f10611297576101008083540402835291602001916112c2565b820191906000526020600020905b8154815290600101906020018083116112a557829003601f168201915b50505050508284815181106112da576112d9615777565b5b602002602001018190525082806112f090615670565b9350505b80806112ff90615670565b9150506111c3565b50809350505050919050565b606060005b600b54811015611437578280519060200120601060008381526020019081526020016000206000600281106113505761134f615777565b5b0160405161135e9190614e80565b60405180910390201415611424576010600082815260200190815260200160002060016002811061139257611391615777565b5b01805461139e9061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546113ca9061560d565b80156114175780601f106113ec57610100808354040283529160200191611417565b820191906000526020600020905b8154815290600101906020018083116113fa57829003601f168201915b5050505050915050611471565b808061142f90615670565b915050611318565b506040518060400160405280600281526020017f7b7d00000000000000000000000000000000000000000000000000000000000081525090505b919050565b611487611481613535565b826135f6565b6114c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bd906150ff565b60405180910390fd5b6114d18383836136d4565b505050565b600080600090505b6009548110156115a3576114f18461393b565b80519060200120600e600083815260200190815260200160002060006002811061151e5761151d615777565b5b0160405161152c9190614e80565b604051809103902014801561158257508280519060200120600e600083815260200190815260200160002060016002811061156a57611569615777565b5b016040516115789190614e80565b6040518091039020145b1561159057809150506115a9565b808061159b90615670565b9150506114de565b50600090505b92915050565b600080600090505b600d54811015611698578280519060200120601160008381526020019081526020016000206001600381106115ef576115ee615777565b5b016040516115fd9190614e80565b60405180910390201415611685576040518060400160405280600581526020017f46616c73650000000000000000000000000000000000000000000000000000008152506011600083815260200190815260200160002060026003811061166757611666615777565b5b01908051906020019061167b929190614093565b508091505061169f565b808061169090615670565b9150506115b7565b50600d5490505b919050565b60006116b284600654613a9c565b6116be60065484610b4f565b6116cb6009548385611707565b600660008154809291906116de90615670565b9190505550600960008154809291906116f690615670565b919050555060065490509392505050565b604051806040016040528061171b8461393b565b815260200182815250600e6000858152602001908152602001600020906002611745929190614119565b50505050565b600061175682612c7a565b905060005b600c548110156118d857600061178a83838151811061177d5761177c615777565b5b6020026020010151611fd3565b90506000601460008381526020019081526020016000206001600281106117b4576117b3615777565b5b0180546117c09061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546117ec9061560d565b80156118395780601f1061180e57610100808354040283529160200191611839565b820191906000526020600020905b81548152906001019060200180831161181c57829003601f168201915b505050505090506118528161184d8461393b565b613c76565b6040518060400160405280600881526020017f46696e6973686564000000000000000000000000000000000000000000000000815250601560008781526020019081526020016000206002600381106118ae576118ad615777565b5b0190805190602001906118c2929190614093565b50505080806118d090615670565b91505061175b565b505050565b6118f8838383604051806020016040528060008152506127e1565b505050565b606060136000838152602001908152602001600020805461191d9061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546119499061560d565b80156119965780601f1061196b57610100808354040283529160200191611996565b820191906000526020600020905b81548152906001019060200180831161197957829003601f168201915b50505050509050919050565b60606016600083815260200190815260200160002080546119c29061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546119ee9061560d565b8015611a3b5780601f10611a1057610100808354040283529160200191611a3b565b820191906000526020600020905b815481529060010190602001808311611a1e57829003601f168201915b50505050509050919050565b60606000600a67ffffffffffffffff811115611a6657611a656157a6565b5b604051908082528060200260200182016040528015611a9957816020015b6060815260200190600190039081611a845790505b5090506000805b600a54811015611bec57611ab38561393b565b80519060200120600f6000838152602001908152602001600020600060028110611ae057611adf615777565b5b01604051611aee9190614e80565b60405180910390201415611bd957600f6000828152602001908152602001600020600160028110611b2257611b21615777565b5b018054611b2e9061560d565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5a9061560d565b8015611ba75780601f10611b7c57610100808354040283529160200191611ba7565b820191906000526020600020905b815481529060010190602001808311611b8a57829003601f168201915b5050505050838381518110611bbf57611bbe615777565b5b60200260200101819052508180611bd590615670565b9250505b8080611be490615670565b915050611aa0565b508192505050919050565b60405180606001604052808381526020018281526020016040518060400160405280600581526020017f46616c736500000000000000000000000000000000000000000000000000000081525081525060156000858152602001908152602001600020906003611c6892919061416c565b50505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0e9061507f565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d889061505f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600090505b600b54811015611e8c57838051906020012060106000838152602001908152602001600020600060028110611e1857611e17615777565b5b01604051611e269190614e80565b60405180910390201415611e79578260106000838152602001908152602001600020600160028110611e5b57611e5a615777565b5b019080519060200190611e6f929190614093565b5080915050611ee4565b8080611e8490615670565b915050611de0565b5060405180604001604052808481526020018381525060106000600b548152602001908152602001600020906002611ec5929190614119565b50600b6000815480929190611ed990615670565b9190505550600b5490505b92915050565b606060126000838152602001908152602001600020600060028110611f1257611f11615777565b5b018054611f1e9061560d565b80601f0160208091040260200160405190810160405280929190818152602001828054611f4a9061560d565b8015611f975780601f10611f6c57610100808354040283529160200191611f97565b820191906000526020600020905b815481529060010190602001808311611f7a57829003601f168201915b50505050509050919050565b6000600854905090565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090505b60065481101561204b5782805190602001206014600083815260200190815260200160002060006002811061201357612012615777565b5b016040516120219190614e80565b604051809103902014156120385780915050612051565b808061204390615670565b915050611fdb565b50600090505b919050565b6060600180546120659061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546120919061560d565b80156120de5780601f106120b3576101008083540402835291602001916120de565b820191906000526020600020905b8154815290600101906020018083116120c157829003601f168201915b5050505050905090565b60006121a383601460008a815260200190815260200160002060006002811061211457612113615777565b5b0180546121209061560d565b80601f016020809104026020016040519081016040528092919081815260200182805461214c9061560d565b80156121995780601f1061216e57610100808354040283529160200191612199565b820191906000526020600020905b81548152906001019060200180831161217c57829003601f168201915b50505050506114d6565b905084601460008981526020019081526020016000206000600281106121cc576121cb615777565b5b0190805190602001906121e0929190614093565b50836014600089815260200190815260200160002060016002811061220857612207615777565b5b01908051906020019061221c929190614093565b50612228818487611707565b61223283836110b9565b61223f600a548888612c36565b600a600081548092919061225290615670565b91905055506007600081548092919061226a90615670565b919050555050505050505050565b6011602052816000526040600020816003811061229457600080fd5b016000915091505080546122a79061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546122d39061560d565b80156123205780601f106122f557610100808354040283529160200191612320565b820191906000526020600020905b81548152906001019060200180831161230357829003601f168201915b505050505081565b6123306141bf565b60156000838152602001908152602001600020600380602002604051908101604052809291906000905b828210156123fd5783820180546123709061560d565b80601f016020809104026020016040519081016040528092919081815260200182805461239c9061560d565b80156123e95780601f106123be576101008083540402835291602001916123e9565b820191906000526020600020905b8154815290600101906020018083116123cc57829003601f168201915b50505050508152602001906001019061235a565b505050509050919050565b61241a612413613535565b8383613d06565b5050565b60606000600a67ffffffffffffffff81111561243d5761243c6157a6565b5b60405190808252806020026020018201604052801561247057816020015b606081526020019060019003908161245b5790505b5090506000805b600a548110156125c35761248a8561393b565b80519060200120600f60008381526020019081526020016000206000600281106124b7576124b6615777565b5b016040516124c59190614e80565b604051809103902014156125b057600f60008281526020019081526020016000206001600281106124f9576124f8615777565b5b0180546125059061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546125319061560d565b801561257e5780601f106125535761010080835404028352916020019161257e565b820191906000526020600020905b81548152906001019060200180831161256157829003601f168201915b505050505083838151811061259657612595615777565b5b602002602001018190525081806125ac90615670565b9250505b80806125bb90615670565b915050612477565b508192505050919050565b601260205281600052604060002081600281106125ea57600080fd5b016000915091505080546125fd9061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546126299061560d565b80156126765780601f1061264b57610100808354040283529160200191612676565b820191906000526020600020905b81548152906001019060200180831161265957829003601f168201915b505050505081565b606060005b600d548110156127a2578280519060200120601160008381526020019081526020016000206001600381106126bb576126ba615777565b5b016040516126c99190614e80565b6040518091039020141561278f57601160008281526020019081526020016000206002600381106126fd576126fc615777565b5b0180546127099061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546127359061560d565b80156127825780601f1061275757610100808354040283529160200191612782565b820191906000526020600020905b81548152906001019060200180831161276557829003601f168201915b50505050509150506127dc565b808061279a90615670565b915050612683565b506040518060400160405280600581526020017f46616c736500000000000000000000000000000000000000000000000000000081525090505b919050565b6127f26127ec613535565b836135f6565b612831576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612828906150ff565b60405180910390fd5b61283d84848484613e73565b50505050565b600080600090505b825181101561294f576000603084838151811061286b5761286a615777565b5b602001015160f81c60f81b60f81c6128839190615516565b60ff1610806128c15750600960308483815181106128a4576128a3615777565b5b602001015160f81c60f81b60f81c6128bc9190615516565b60ff16115b156128d0576000915050612951565b60018184516128df91906154e2565b6128e991906154e2565b600a6128f5919061536a565b603084838151811061290a57612909615777565b5b602001015160f81c60f81b60f81c6129229190615516565b60ff1661292f9190615488565b8261293a9190615290565b9150808061294790615670565b91505061284b565b505b919050565b60606014600083815260200190815260200160002060006002811061297e5761297d615777565b5b01805461298a9061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546129b69061560d565b8015612a035780601f106129d857610100808354040283529160200191612a03565b820191906000526020600020905b8154815290600101906020018083116129e657829003601f168201915b50505050509050919050565b600080600090505b600854811015612a8757828051906020012060156000838152602001908152602001600020600160038110612a4f57612a4e615777565b5b01604051612a5d9190614e80565b60405180910390201415612a745780915050612a8d565b8080612a7f90615670565b915050612a17565b50600090505b919050565b600080600090505b600d54811015612baf57848051906020012060116000838152602001908152602001600020600160038110612ad257612ad1615777565b5b01604051612ae09190614e80565b60405180910390201415612b9c578360116000838152602001908152602001600020600060038110612b1557612b14615777565b5b019080519060200190612b29929190614093565b506040518060400160405280600481526020017f547275650000000000000000000000000000000000000000000000000000000081525060116000838152602001908152602001600020600260038110612b8657612b85615777565b5b019080519060200190612b9a929190614093565b505b8080612ba790615670565b915050612a9a565b50612bba8483611dd8565b50600b5490509392505050565b600080600090505b600754811015612c2b57828051906020012060136000838152602001908152602001600020604051612c019190614e80565b60405180910390201415612c185780915050612c31565b8080612c2390615670565b915050612bcf565b50600090505b919050565b6040518060400160405280612c4a8461393b565b815260200182815250600f6000858152602001908152602001600020906002612c74929190614119565b50505050565b60606000805b600954811015612cfe57612c938461393b565b80519060200120600e6000838152602001908152602001600020600060028110612cc057612cbf615777565b5b01604051612cce9190614e80565b60405180910390201415612ceb578180612ce790615670565b9250505b8080612cf690615670565b915050612c80565b5060008167ffffffffffffffff811115612d1b57612d1a6157a6565b5b604051908082528060200260200182016040528015612d4e57816020015b6060815260200190600190039081612d395790505b5090506000600c8190555060005b600954811015612eb457612d6f8561393b565b80519060200120600e6000838152602001908152602001600020600060028110612d9c57612d9b615777565b5b01604051612daa9190614e80565b60405180910390201415612ea157600e6000828152602001908152602001600020600160028110612dde57612ddd615777565b5b018054612dea9061560d565b80601f0160208091040260200160405190810160405280929190818152602001828054612e169061560d565b8015612e635780601f10612e3857610100808354040283529160200191612e63565b820191906000526020600020905b815481529060010190602001808311612e4657829003601f168201915b505050505082600c5481518110612e7d57612e7c615777565b5b6020026020010181905250600c6000815480929190612e9b90615670565b91905055505b8080612eac90615670565b915050612d5c565b508092505050919050565b80601360008481526020019081526020016000209080519060200190612ee6929190614093565b505050565b606060008060005b600d54811015612f6957848051906020012060116000838152602001908152602001600020600060038110612f2b57612f2a615777565b5b01604051612f399190614e80565b60405180910390201415612f56578280612f5290615670565b9350505b8080612f6190615670565b915050612ef3565b5060008267ffffffffffffffff811115612f8657612f856157a6565b5b604051908082528060200260200182016040528015612fb957816020015b6060815260200190600190039081612fa45790505b50905060005b600d5481101561311357858051906020012060116000838152602001908152602001600020600060038110612ff757612ff6615777565b5b016040516130059190614e80565b60405180910390201415613100576130d36130ce6011600084815260200190815260200160002060016003811061303f5761303e615777565b5b01805461304b9061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546130779061560d565b80156130c45780601f10613099576101008083540402835291602001916130c4565b820191906000526020600020905b8154815290600101906020018083116130a757829003601f168201915b5050505050612843565b612956565b8284815181106130e6576130e5615777565b5b602002602001018190525082806130fc90615670565b9350505b808061310b90615670565b915050612fbf565b50809350505050919050565b600061312e6008548484611bf7565b61316f6008546040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152506110b9565b6008600081548092919061318290615670565b9190505550600854905092915050565b600d5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606000805b6009548110156132b0576132458461393b565b80519060200120600e600083815260200190815260200160002060006002811061327257613271615777565b5b016040516132809190614e80565b6040518091039020141561329d57818061329990615670565b9250505b80806132a890615670565b915050613232565b5060008167ffffffffffffffff8111156132cd576132cc6157a6565b5b60405190808252806020026020018201604052801561330057816020015b60608152602001906001900390816132eb5790505b5090506000805b6009548110156134535761331a8661393b565b80519060200120600e600083815260200190815260200160002060006002811061334757613346615777565b5b016040516133559190614e80565b6040518091039020141561344057600e600082815260200190815260200160002060016002811061338957613388615777565b5b0180546133959061560d565b80601f01602080910402602001604051908101604052809291908181526020018280546133c19061560d565b801561340e5780601f106133e35761010080835404028352916020019161340e565b820191906000526020600020905b8154815290600101906020018083116133f157829003601f168201915b505050505083838151811061342657613425615777565b5b6020026020010181905250818061343c90615670565b9250505b808061344b90615670565b915050613307565b50819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166135b083611c6e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000613601826134c9565b613640576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136379061501f565b60405180910390fd5b600061364b83611c6e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061368d575061368c8185613198565b5b806136cb57508373ffffffffffffffffffffffffffffffffffffffff166136b384610db3565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166136f482611c6e565b73ffffffffffffffffffffffffffffffffffffffff161461374a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161374190614f9f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156137ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137b190614fdf565b60405180910390fd5b6137c5838383613ecf565b6137d060008261353d565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461382091906154e2565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546138779190615290565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4613936838383613ed4565b505050565b60606000821415613983576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613a97565b600082905060005b600082146139b557808061399e90615670565b915050600a826139ae91906152e6565b915061398b565b60008167ffffffffffffffff8111156139d1576139d06157a6565b5b6040519080825280601f01601f191660200182016040528015613a035781602001600182028036833780820191505090505b5090505b60008514613a9057600182613a1c91906154e2565b9150600a85613a2b91906156b9565b6030613a379190615290565b60f81b818381518110613a4d57613a4c615777565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85613a8991906152e6565b9450613a07565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b039061509f565b60405180910390fd5b613b15816134c9565b15613b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b4c90614fbf565b60405180910390fd5b613b6160008383613ecf565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613bb19190615290565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4613c7260008383613ed4565b5050565b60405180606001604052808381526020018281526020016040518060400160405280600581526020017f46616c736500000000000000000000000000000000000000000000000000000081525081525060116000600d548152602001908152602001600020906003613ce992919061416c565b50600d6000815480929190613cfd90615670565b91905055505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613d75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d6c90614fff565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051613e669190614f42565b60405180910390a3505050565b613e7e8484846136d4565b613e8a84848484613ed9565b613ec9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ec090614f7f565b60405180910390fd5b50505050565b505050565b505050565b6000613efa8473ffffffffffffffffffffffffffffffffffffffff16614070565b15614063578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02613f23613535565b8786866040518563ffffffff1660e01b8152600401613f459493929190614eb2565b602060405180830381600087803b158015613f5f57600080fd5b505af1925050508015613f9057506040513d601f19601f82011682018060405250810190613f8d919061460f565b60015b614013573d8060008114613fc0576040519150601f19603f3d011682016040523d82523d6000602084013e613fc5565b606091505b5060008151141561400b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161400290614f7f565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050614068565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461409f9061560d565b90600052602060002090601f0160209004810192826140c15760008555614108565b82601f106140da57805160ff1916838001178555614108565b82800160010185558215614108579182015b828111156141075782518255916020019190600101906140ec565b5b50905061411591906141e6565b5090565b826002810192821561415b579160200282015b8281111561415a57825182908051906020019061414a929190614093565b509160200191906001019061412c565b5b5090506141689190614203565b5090565b82600381019282156141ae579160200282015b828111156141ad57825182908051906020019061419d929190614093565b509160200191906001019061417f565b5b5090506141bb9190614203565b5090565b60405180606001604052806003905b60608152602001906001900390816141ce5790505090565b5b808211156141ff5760008160009055506001016141e7565b5090565b5b80821115614223576000818161421a9190614227565b50600101614204565b5090565b5080546142339061560d565b6000825580601f106142455750614264565b601f01602090049060005260206000209081019061426391906141e6565b5b50565b600061427a6142758461515f565b61513a565b905082815260208101848484011115614296576142956157da565b5b6142a18482856155cb565b509392505050565b60006142bc6142b784615190565b61513a565b9050828152602081018484840111156142d8576142d76157da565b5b6142e38482856155cb565b509392505050565b6000813590506142fa81615b98565b92915050565b60008135905061430f81615baf565b92915050565b60008135905061432481615bc6565b92915050565b60008151905061433981615bc6565b92915050565b600082601f830112614354576143536157d5565b5b8135614364848260208601614267565b91505092915050565b600082601f830112614382576143816157d5565b5b81356143928482602086016142a9565b91505092915050565b6000813590506143aa81615bdd565b92915050565b6000602082840312156143c6576143c56157e4565b5b60006143d4848285016142eb565b91505092915050565b600080604083850312156143f4576143f36157e4565b5b6000614402858286016142eb565b9250506020614413858286016142eb565b9150509250929050565b600080600060608486031215614436576144356157e4565b5b6000614444868287016142eb565b9350506020614455868287016142eb565b92505060406144668682870161439b565b9150509250925092565b6000806000806080858703121561448a576144896157e4565b5b6000614498878288016142eb565b94505060206144a9878288016142eb565b93505060406144ba8782880161439b565b925050606085013567ffffffffffffffff8111156144db576144da6157df565b5b6144e78782880161433f565b91505092959194509250565b6000806040838503121561450a576145096157e4565b5b6000614518858286016142eb565b925050602061452985828601614300565b9150509250929050565b60008060006060848603121561454c5761454b6157e4565b5b600061455a868287016142eb565b935050602084013567ffffffffffffffff81111561457b5761457a6157df565b5b6145878682870161436d565b92505060406145988682870161439b565b9150509250925092565b600080604083850312156145b9576145b86157e4565b5b60006145c7858286016142eb565b92505060206145d88582860161439b565b9150509250929050565b6000602082840312156145f8576145f76157e4565b5b600061460684828501614315565b91505092915050565b600060208284031215614625576146246157e4565b5b60006146338482850161432a565b91505092915050565b600060208284031215614652576146516157e4565b5b600082013567ffffffffffffffff8111156146705761466f6157df565b5b61467c8482850161436d565b91505092915050565b6000806040838503121561469c5761469b6157e4565b5b600083013567ffffffffffffffff8111156146ba576146b96157df565b5b6146c68582860161436d565b925050602083013567ffffffffffffffff8111156146e7576146e66157df565b5b6146f38582860161436d565b9150509250929050565b600080600060608486031215614716576147156157e4565b5b600084013567ffffffffffffffff811115614734576147336157df565b5b6147408682870161436d565b935050602084013567ffffffffffffffff811115614761576147606157df565b5b61476d8682870161436d565b925050604084013567ffffffffffffffff81111561478e5761478d6157df565b5b61479a8682870161436d565b9150509250925092565b6000602082840312156147ba576147b96157e4565b5b60006147c88482850161439b565b91505092915050565b600080604083850312156147e8576147e76157e4565b5b60006147f68582860161439b565b925050602083013567ffffffffffffffff811115614817576148166157df565b5b6148238582860161436d565b9150509250929050565b600080600060608486031215614846576148456157e4565b5b60006148548682870161439b565b935050602084013567ffffffffffffffff811115614875576148746157df565b5b6148818682870161436d565b925050604084013567ffffffffffffffff8111156148a2576148a16157df565b5b6148ae8682870161436d565b9150509250925092565b60008060008060008060c087890312156148d5576148d46157e4565b5b60006148e389828a0161439b565b965050602087013567ffffffffffffffff811115614904576149036157df565b5b61491089828a0161436d565b955050604087013567ffffffffffffffff811115614931576149306157df565b5b61493d89828a0161436d565b945050606087013567ffffffffffffffff81111561495e5761495d6157df565b5b61496a89828a0161436d565b935050608061497b89828a0161439b565b92505060a087013567ffffffffffffffff81111561499c5761499b6157df565b5b6149a889828a0161436d565b9150509295509295509295565b600080604083850312156149cc576149cb6157e4565b5b60006149da8582860161439b565b92505060206149eb8582860161439b565b9150509250929050565b600080600060608486031215614a0e57614a0d6157e4565b5b6000614a1c8682870161439b565b9350506020614a2d8682870161439b565b925050604084013567ffffffffffffffff811115614a4e57614a4d6157df565b5b614a5a8682870161436d565b9150509250925092565b6000614a708383614c38565b905092915050565b614a818161554a565b82525050565b6000614a92826151f0565b614a9c8185615236565b935083602082028501614aae856151c1565b8060005b85811015614aea5784840389528151614acb8582614a64565b9450614ad68361521c565b925060208a01995050600181019050614ab2565b50829750879550505050505092915050565b6000614b07826151fb565b614b118185615241565b935083602082028501614b23856151cb565b8060005b85811015614b5f5784840389528151614b408582614a64565b9450614b4b83615229565b925060208a01995050600181019050614b27565b50829750879550505050505092915050565b614b7a8161555c565b82525050565b6000614b8b82615206565b614b958185615252565b9350614ba58185602086016155da565b614bae816157e9565b840191505092915050565b60008154614bc68161560d565b614bd08186615263565b94506001821660008114614beb5760018114614bfc57614c2f565b60ff19831686528186019350614c2f565b614c05856151db565b60005b83811015614c2757815481890152600182019150602081019050614c08565b838801955050505b50505092915050565b6000614c4382615211565b614c4d818561526e565b9350614c5d8185602086016155da565b614c66816157e9565b840191505092915050565b6000614c7c82615211565b614c86818561527f565b9350614c968185602086016155da565b614c9f816157e9565b840191505092915050565b6000614cb760328361527f565b9150614cc282615807565b604082019050919050565b6000614cda60258361527f565b9150614ce582615856565b604082019050919050565b6000614cfd601c8361527f565b9150614d08826158a5565b602082019050919050565b6000614d2060248361527f565b9150614d2b826158ce565b604082019050919050565b6000614d4360198361527f565b9150614d4e8261591d565b602082019050919050565b6000614d66602c8361527f565b9150614d7182615946565b604082019050919050565b6000614d8960388361527f565b9150614d9482615995565b604082019050919050565b6000614dac602a8361527f565b9150614db7826159e4565b604082019050919050565b6000614dcf60298361527f565b9150614dda82615a33565b604082019050919050565b6000614df260208361527f565b9150614dfd82615a82565b602082019050919050565b6000614e15602c8361527f565b9150614e2082615aab565b604082019050919050565b6000614e3860218361527f565b9150614e4382615afa565b604082019050919050565b6000614e5b60318361527f565b9150614e6682615b49565b604082019050919050565b614e7a816155b4565b82525050565b6000614e8c8284614bb9565b915081905092915050565b6000602082019050614eac6000830184614a78565b92915050565b6000608082019050614ec76000830187614a78565b614ed46020830186614a78565b614ee16040830185614e71565b8181036060830152614ef38184614b80565b905095945050505050565b60006020820190508181036000830152614f188184614a87565b905092915050565b60006020820190508181036000830152614f3a8184614afc565b905092915050565b6000602082019050614f576000830184614b71565b92915050565b60006020820190508181036000830152614f778184614c71565b905092915050565b60006020820190508181036000830152614f9881614caa565b9050919050565b60006020820190508181036000830152614fb881614ccd565b9050919050565b60006020820190508181036000830152614fd881614cf0565b9050919050565b60006020820190508181036000830152614ff881614d13565b9050919050565b6000602082019050818103600083015261501881614d36565b9050919050565b6000602082019050818103600083015261503881614d59565b9050919050565b6000602082019050818103600083015261505881614d7c565b9050919050565b6000602082019050818103600083015261507881614d9f565b9050919050565b6000602082019050818103600083015261509881614dc2565b9050919050565b600060208201905081810360008301526150b881614de5565b9050919050565b600060208201905081810360008301526150d881614e08565b9050919050565b600060208201905081810360008301526150f881614e2b565b9050919050565b6000602082019050818103600083015261511881614e4e565b9050919050565b60006020820190506151346000830184614e71565b92915050565b6000615144615155565b9050615150828261563f565b919050565b6000604051905090565b600067ffffffffffffffff82111561517a576151796157a6565b5b615183826157e9565b9050602081019050919050565b600067ffffffffffffffff8211156151ab576151aa6157a6565b5b6151b4826157e9565b9050602081019050919050565b6000819050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600060039050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061529b826155b4565b91506152a6836155b4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156152db576152da6156ea565b5b828201905092915050565b60006152f1826155b4565b91506152fc836155b4565b92508261530c5761530b615719565b5b828204905092915050565b6000808291508390505b60018511156153615780860481111561533d5761533c6156ea565b5b600185161561534c5780820291505b808102905061535a856157fa565b9450615321565b94509492505050565b6000615375826155b4565b9150615380836155b4565b92506153ad7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846153b5565b905092915050565b6000826153c55760019050615481565b816153d35760009050615481565b81600181146153e957600281146153f357615422565b6001915050615481565b60ff841115615405576154046156ea565b5b8360020a91508482111561541c5761541b6156ea565b5b50615481565b5060208310610133831016604e8410600b84101617156154575782820a905083811115615452576154516156ea565b5b615481565b6154648484846001615317565b9250905081840481111561547b5761547a6156ea565b5b81810290505b9392505050565b6000615493826155b4565b915061549e836155b4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156154d7576154d66156ea565b5b828202905092915050565b60006154ed826155b4565b91506154f8836155b4565b92508282101561550b5761550a6156ea565b5b828203905092915050565b6000615521826155be565b915061552c836155be565b92508282101561553f5761553e6156ea565b5b828203905092915050565b600061555582615594565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156155f85780820151818401526020810190506155dd565b83811115615607576000848401525b50505050565b6000600282049050600182168061562557607f821691505b6020821081141561563957615638615748565b5b50919050565b615648826157e9565b810181811067ffffffffffffffff82111715615667576156666157a6565b5b80604052505050565b600061567b826155b4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156156ae576156ad6156ea565b5b600182019050919050565b60006156c4826155b4565b91506156cf836155b4565b9250826156df576156de615719565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b615ba18161554a565b8114615bac57600080fd5b50565b615bb88161555c565b8114615bc357600080fd5b50565b615bcf81615568565b8114615bda57600080fd5b50565b615be6816155b4565b8114615bf157600080fd5b5056fea26469706673582212207bd311e52145494765e1bd459c70806b459288341465f615b4acadbb07f1db5a64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1590,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1592,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_bidIds",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1594,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_eventIds",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1596,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_EventTokenIds",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1598,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_TokenBidIds",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1600,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_TokenGiftIds",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1602,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_EventTokenSearchIds",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1604,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_UserTokenIds",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1610,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "AllEventTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1616,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "AllTokensBids",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1622,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "AllTokensGift",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1628,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "AllUserToken",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)3_storage)"
      },
      {
        "astId": 1634,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_SearchedStore",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1638,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_bidURIs",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1644,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1650,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_eventURIs",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)3_storage)"
      },
      {
        "astId": 1654,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_eventRaised",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1658,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "_eventTokens",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      {
        "astId": 1660,
        "contract": "contracts/AuroraERC721.sol:AuroraERC721",
        "label": "owner",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)2_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_string_storage)3_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)2_storage"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)3_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)3_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}